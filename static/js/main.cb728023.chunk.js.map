{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","style","color","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","Fragment","heading","value","onChange","event","console","log","target","backgroundColor","rows","handleUpClick","newText","showAlert","handleLoClick","handleClearClick","handleCopy","document","getElementById","select","navigator","clipboard","writeText","my-3","split","length","App","setMode","setAlert","message","setTimeout","aboutText","body","setInterval","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.cb728023.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n         const lower=word.toLowerCase();\r\n         return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n          }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n   \r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Alert","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg nabvar-${props.mode} bg-${props.mode}`}>\r\n    \r\n    <div className=\"container-fluid\" >\r\n      <a className=\"navbar-brand \"style={{color:props.mode==='dark'?'white':'black'}} href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active \" style={{color:props.mode==='dark'?'white':'black'}}aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          {/* <li className=\"nav-item \">\r\n            <a className=\"nav-link \" style={{color:props.mode==='dark'?'white':'black'}} href=\"/about\">{props.aboutText}</a>\r\n          </li> */}\r\n        </ul>\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault \"/>\r\n        <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\" >Dark Mode</label>\r\n        </div>\r\n        {/* <form className=\"d-flex\">\r\n          < input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n        </form> */}\r\n  \r\n      </div>\r\n    </div>\r\n  </nav>\r\n\r\n  )\r\n}\r\n\r\nNavbar.propTypes={title:PropTypes.string.isRequired,\r\n  aboutText:PropTypes.string}\r\n\r\n// Navbar.defaultProps={\r\n//     title:\"set title here\",\r\n//     aboutText:\"text here\"\r\n//   };","import React,{useState}from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n   const handleUpClick=()=>{\r\n     console.log(\"uppercase was clicked\");\r\n     let newText=text.toUpperCase();\r\n     setText(newText)\r\n     props.showAlert(\"Converted to uppercase\",\"success\");\r\n   }\r\n   const handleLoClick=()=>{\r\n    console.log(\"lowercase was clicked\");\r\n    let newText=text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to lowercase\",\"success\");\r\n  }\r\n\r\n  const handleClearClick=()=>{\r\n    let newtext=\"\";\r\n    setText(newtext)\r\n  }\r\n   const handleOnChange=(event)=>{\r\n    console.log(\"on change\");\r\n    setText(event.target.value);\r\n    \r\n   }\r\n   \r\n\r\n   const handleCopy=()=>{\r\n       const text=document.getElementById(\"mybox\");\r\n       text.select();\r\n       navigator.clipboard.writeText(text.value);\r\n   }\r\n\r\n\r\n\r\n    const[text,setText]=useState(\"Enter text here\");\r\n    // setText(\"hello i am jazz\");\r\n  return (\r\n    <>\r\n     <div className='container' style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>{props.heading}</h1>\r\n   <div className=\"mb-3\">\r\n    <textarea className=\"form-control\" value= {text} onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'white':'grey',color:props.mode==='dark'?'white':'#042743'}} id=\"mybox\" rows=\"8\"></textarea>\r\n  </div>\r\n  <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n  <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to lowercase</button>\r\n  <button className='btn btn-primary mx-1' onClick={handleClearClick}>Clear text</button>\r\n  <button className='btn btn-primary mx-1' onClick={handleCopy}>Copy text</button>\r\n  </div>\r\n\r\n  <div className=\"container\" my-3='true' style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n    <h2>Your text summary</h2>\r\n    <p>{text.split(\" \").length-1} words and {text.length} characters</p>\r\n   \r\n    <p>{0.008*text.split(\" \").length} Minutes read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text:\"Enter something in textbox to preview\"}</p>\r\n\r\n  </div>\r\n    </>\r\n   \r\n  )\r\n}\r\n","import './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React,{useState} from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const[mode,setMode]=useState('light');\n  const[alert,setAlert]=useState(null);\n  const showAlert=(message,type)=>{\n         setAlert({\n          msg:message,\n          type:type,\n         })\n         setTimeout(()=>{\n          setAlert(null);\n\n         },1500);\n  }\n  const toggleMode=()=>{\n    if(mode==='light')\n      {\n         setMode('dark');\n        document.body.style.backgroundColor='#042743';\n        showAlert(\"Dark mode has been enabled\",\"success\");\n        document.title='TextUtils-Dark Mode';\n        setInterval(() => {\n          document.title='TextUtils is amazing mode';\n        }, 2000);\n        \n        setInterval(()=>{\n          document.title='Install TextUtils Now';\n\n        },1500);\n      }\n      else{\n         setMode('light');\n         document.body.style.backgroundColor='white';\n         showAlert(\"light mode has been enabled\",\"success\");\n         document.title='TextUtils-Light Mode';\n      }\n   \n  }\n  return (\n    <>\n  <Navbar title=\"Textutils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode}/>\n  {/* <Router>\n        <Navbar title='TextUtils' aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route eaxct path=\"/about\" element={<About />} />\n            <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter Text\" mode={mode} />} />\n          </Routes>\n        </div>\n      </Router> */}\n       <Alert alert={alert} />\n       <div className=\"container my-3\">\n      <TextForm showAlert={showAlert} heading=\"Enter Text\" mode={mode} />\n      </div>\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}